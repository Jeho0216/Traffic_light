
Traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a27  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000897  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000248  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	79 d0       	rcall	.+242    	; 0x1a6 <main>
  b4:	8b c0       	rjmp	.+278    	; 0x1cc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <delay_time>:

unsigned char h_light[5] = {0x10, 0x40, 0xA0, 0xC0, 0x80};
unsigned char v_light[5] = {0x08, 0x02, 0x05, 0x03, 0x01};

void delay_time(int i){
	switch(i){
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	a1 f0       	breq	.+40     	; 0xe6 <delay_time+0x2e>
  be:	1c f4       	brge	.+6      	; 0xc6 <delay_time+0xe>
  c0:	89 2b       	or	r24, r25
  c2:	39 f0       	breq	.+14     	; 0xd2 <delay_time+0x1a>
  c4:	08 95       	ret
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	91 05       	cpc	r25, r1
  ca:	b9 f0       	breq	.+46     	; 0xfa <delay_time+0x42>
  cc:	03 97       	sbiw	r24, 0x03	; 3
  ce:	59 f0       	breq	.+22     	; 0xe6 <delay_time+0x2e>
  d0:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	83 e2       	ldi	r24, 0x23	; 35
  d6:	94 ef       	ldi	r25, 0xF4	; 244
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <delay_time+0x20>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <delay_time+0x2a>
  e2:	00 00       	nop
  e4:	08 95       	ret
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <delay_time+0x34>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <delay_time+0x3e>
  f6:	00 00       	nop
  f8:	08 95       	ret
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	8b e7       	ldi	r24, 0x7B	; 123
  fe:	92 e9       	ldi	r25, 0x92	; 146
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <delay_time+0x48>
 108:	00 c0       	rjmp	.+0      	; 0x10a <delay_time+0x52>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <h_road_light>:
			_delay_ms(3000);
		break;
	}
}

void h_road_light(){
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	05 e0       	ldi	r16, 0x05	; 5
 11c:	11 e0       	ldi	r17, 0x01	; 1
	int i = 0;
	for(i = 0; i < 5; i++){		//수평도로 일 때, 하위비트 0001로 고정.
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD = h_light[i] | 0x01;
		PORTF = h_light[i] | 0x01;
 122:	0f 2e       	mov	r0, r31
 124:	f2 e6       	ldi	r31, 0x62	; 98
 126:	ef 2e       	mov	r14, r31
 128:	f1 2c       	mov	r15, r1
 12a:	f0 2d       	mov	r31, r0
 12c:	f8 01       	movw	r30, r16
}

void h_road_light(){
	int i = 0;
	for(i = 0; i < 5; i++){		//수평도로 일 때, 하위비트 0001로 고정.
		PORTD = h_light[i] | 0x01;
 12e:	d8 01       	movw	r26, r16
 130:	8d 91       	ld	r24, X+
 132:	8d 01       	movw	r16, r26
 134:	81 60       	ori	r24, 0x01	; 1
 136:	82 bb       	out	0x12, r24	; 18
		PORTF = h_light[i] | 0x01;
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	f7 01       	movw	r30, r14
 13e:	80 83       	st	Z, r24
		delay_time(i);
 140:	ce 01       	movw	r24, r28
 142:	ba df       	rcall	.-140    	; 0xb8 <delay_time>
	}
}

void h_road_light(){
	int i = 0;
	for(i = 0; i < 5; i++){		//수평도로 일 때, 하위비트 0001로 고정.
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	c5 30       	cpi	r28, 0x05	; 5
 148:	d1 05       	cpc	r29, r1
 14a:	81 f7       	brne	.-32     	; 0x12c <h_road_light+0x1e>
		PORTD = h_light[i] | 0x01;
		PORTF = h_light[i] | 0x01;
		delay_time(i);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <v_road_light>:

void v_road_light(){
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 e0       	ldi	r16, 0x00	; 0
 168:	11 e0       	ldi	r17, 0x01	; 1
	int i = 0;
	for(i = 0; i < 5; i++){		//수직도로 일 때, 상위비트 1000으로 고정.
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD = v_light[i] | 0x80;
		PORTF = v_light[i] | 0x80;
 16e:	0f 2e       	mov	r0, r31
 170:	f2 e6       	ldi	r31, 0x62	; 98
 172:	ef 2e       	mov	r14, r31
 174:	f1 2c       	mov	r15, r1
 176:	f0 2d       	mov	r31, r0
 178:	f8 01       	movw	r30, r16
}

void v_road_light(){
	int i = 0;
	for(i = 0; i < 5; i++){		//수직도로 일 때, 상위비트 1000으로 고정.
		PORTD = v_light[i] | 0x80;
 17a:	d8 01       	movw	r26, r16
 17c:	8d 91       	ld	r24, X+
 17e:	8d 01       	movw	r16, r26
 180:	80 68       	ori	r24, 0x80	; 128
 182:	82 bb       	out	0x12, r24	; 18
		PORTF = v_light[i] | 0x80;
 184:	80 81       	ld	r24, Z
 186:	80 68       	ori	r24, 0x80	; 128
 188:	f7 01       	movw	r30, r14
 18a:	80 83       	st	Z, r24
		delay_time(i);
 18c:	ce 01       	movw	r24, r28
 18e:	94 df       	rcall	.-216    	; 0xb8 <delay_time>
	}
}

void v_road_light(){
	int i = 0;
	for(i = 0; i < 5; i++){		//수직도로 일 때, 상위비트 1000으로 고정.
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	c5 30       	cpi	r28, 0x05	; 5
 194:	d1 05       	cpc	r29, r1
 196:	81 f7       	brne	.-32     	; 0x178 <v_road_light+0x1e>
		PORTD = v_light[i] | 0x80;
		PORTF = v_light[i] | 0x80;
		delay_time(i);
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <main>:
int main(void)
{
	DDRD = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	81 bb       	out	0x11, r24	; 17
	DDRF = 0xFF;
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTD = 0x00;
 1ae:	12 ba       	out	0x12, r1	; 18
	PORTF = 0x00;
 1b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    while (1) 
    {
		v_road_light();		//수평도로 직진
 1b4:	d2 df       	rcall	.-92     	; 0x15a <v_road_light>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x16>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x20>
		_delay_ms(100);
		h_road_light();		//수직도로 직진
 1c6:	00 00       	nop
 1c8:	a2 df       	rcall	.-188    	; 0x10e <h_road_light>
 1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <main+0xe>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
